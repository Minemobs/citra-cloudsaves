/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package fr.minemobs.citracloudsaves

import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.mongodb.client.model.Filters.and
import com.mongodb.client.model.Filters.eq
import fr.minemobs.citracloudsaves.JWTUtils.getKey
import fr.minemobs.citracloudsaves.JWTUtils.jweSerialize
import fr.minemobs.citracloudsaves.RequestUtils.getAuthorizationToken
import fr.minemobs.citracloudsaves.RequestUtils.getUser
import io.javalin.Javalin
import io.javalin.http.BadRequestResponse
import io.javalin.http.Context
import io.javalin.http.NotFoundResponse
import io.javalin.http.util.NaiveRateLimit
import java.nio.file.Files
import java.nio.file.StandardOpenOption
import java.util.concurrent.TimeUnit
import kotlin.io.path.Path


object App {
    val GSON: Gson = GsonBuilder().setPrettyPrinting().create()
}

fun getConfig() : MongoConnection.MongoConfig? {
    val path = Path("secrets.json")
    if(Files.notExists(path)) {
        Files.writeString(path,
            """
            {
                "username": "YOUR_DB_USERNAME",
                "password": "YOUR_DB_PASSWORD",
                "database": "users",
                "collections": "user"
            }
            """.trimIndent(), StandardOpenOption.CREATE, StandardOpenOption.WRITE)
        return null
    }
    Files.newBufferedReader(path).use { return App.GSON.fromJson(it, MongoConnection.MongoConfig::class.java) }
}

fun main() {
    val key = getKey()

    val config = getConfig() ?: throw NullPointerException("Couldn't connect to the DB due to the 'secrets.json' secrets not being valid.")
    val mongoClient = MongoConnection.createMongoClient(config)
    val usersDB = mongoClient.getDatabase("users")
    val collection = usersDB.getCollection("user", User::class.java)

    val app = Javalin.create()
        .post("register") {
            NaiveRateLimit.requestPerTimeUnit(it, 1, TimeUnit.MINUTES)
            val user = getUser(it)
            collection.insertOne(user)
            val jwe = jweSerialize(key, user)
            it.result(jwe)
        }
        .post("login") {
            NaiveRateLimit.requestPerTimeUnit(it, 3, TimeUnit.MINUTES)
            val tempUser = getUser(it)
            val user = collection.find(and(eq("username", tempUser.username), eq("hashPassword", tempUser.hashPassword)))
                .firstOrNull() ?: throw NotFoundResponse("Wrong password or wrong username")
            val jwe = jweSerialize(key, user)
            it.result(jwe)
        }
        .post("save/{gameID}") {
            NaiveRateLimit.requestPerTimeUnit(it, 3, TimeUnit.MINUTES)
            val token = getAuthorizationToken(it)

            val file = it.uploadedFile("save") ?: throw BadRequestResponse("Missin' the save file")
            file.contentAndClose { content ->
                Files.write(Path(it.pathParam("gameID") + ".save"), content.readBytes(), StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE)
                it.result("Received ur file!")
            }
        }
        .get("save/{gameID}") {
            NaiveRateLimit.requestPerTimeUnit(it, 3, TimeUnit.MINUTES)
            val token = getAuthorizationToken(it)

            val path = Path(it.pathParam("gameID") + ".save")
            if(Files.notExists(path)) throw NotFoundResponse("Nahh mate, we couldn't find ur save")
            val bytes = Files.readAllBytes(Path(it.pathParam("gameID") + ".save"))
            it.result(bytes)
        }.start(8080)
    mongoClient.close()
}
